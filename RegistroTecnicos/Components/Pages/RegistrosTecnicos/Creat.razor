@page "/index/creat"
@rendermode InteractiveServer 
@inject TecnicosServices TS
@inject TiposTecnicosServices TTS
@inject NavigationManager navigation

<PageTitle>Crear T&eacute;cnicos</PageTitle>
<h2>Crear nuevos T&eacute;cnicos</h2>

<EditForm Model="@Tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="Contenedor_Agregar">
        <div class="Contenedor_Secundario">
            <h3>Nuevo t&eacute;cnico</h3>
            <div class="inputs-agregar">
                <label>Seleccionar Tipo de T&eacute;cnico:</label>
                <InputSelect @bind-Value="Tecnico.TipoTecnicoId">
                    @foreach (var tipo in TipoTecnico)
                    {
                        <option value="@tipo.TipoDeTecnicosId">@tipo.Descripcion</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Tecnico.TipoTecnicoId)" />
            </div>

            <div class="inputs-agregar">
                <label>Nombres:</label>
                <InputText @bind-Value="Tecnico.Nombres" />
                <ValidationMessage For="@(() => Tecnico.Nombres)" />
            </div>

            <div class="inputs-agregar">
                <label>Sueldo hora:</label>
                <InputNumber @bind-Value="Tecnico.SueldoHora" />
                <ValidationMessage For="@(() => Tecnico.SueldoHora)" />
            </div>

            @if (!string.IsNullOrEmpty(Mensaje))
            {
                <div class="alert alert-danger">
                    @Mensaje
                </div>
            }

            <div class="Botones_agregar">
                <button type="button" @onclick="Volver" class="btn btn-info bi bi-arrow-left-square "> Volver</button>
                <button type="submit" class="btn btn-success bi bi-floppy"> Guardar</button>
            </div>
        </div>

    </div>

</EditForm>

@code {
    public List<TiposTecnicos> TipoTecnico { get; set; } = new List<TiposTecnicos>();
    public Tecnicos Tecnico { get; set; } = new Tecnicos();
    string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        TipoTecnico = await TTS.Listar(t => true);
    }

    public async Task Guardar()
    {
        Mensaje = string.Empty; 
        if(Tecnico.TipoTecnicoId == 0)
        {
            Mensaje = "Por favor, Agregue un tipo de tecnico";
            return;
        }
        if (string.IsNullOrWhiteSpace(Tecnico.Nombres) || Tecnico.SueldoHora < 0 )
        {
            Mensaje = "Por favor, complete todos los campos correctamente.";
            return;
        }

        var nombreExiste = await TS.ExisteNombre(Tecnico.Nombres);
        if (nombreExiste)
        {
            Mensaje = "Ya existe un técnico con el mismo Nombres.";
            return;
        }

        await TS.Guardar(Tecnico);
        navigation.NavigateTo("/index");
    }
	public void Volver()
	{
		navigation.NavigateTo("/index");
    }
}
