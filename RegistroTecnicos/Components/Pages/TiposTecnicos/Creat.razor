@page "/TiposTecnicos/RegistroTipos/Creat"
@rendermode InteractiveServer 
@inject TiposTecnicosServices TTS
@inject NavigationManager navigation

<PageTitle>Crear tipo de técnicos</PageTitle>
<h2>Crear nuevos tipos de tecnicos</h2>

<EditForm Model="@TipoTecnicos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="Contenedor_Agregar">
        <div class="Contenedor_Secundario">
            <h3>Nuevo tipo de técnico</h3>

            <div class="inputs-agregar">
                <label>Descripcion</label>
                <InputText @bind-Value="TipoTecnicos.Descripcion" />
                <ValidationMessage For="@(() => TipoTecnicos.Descripcion)" />
            </div>

            @if (!string.IsNullOrEmpty(Mensaje))
            {
                <div class="alert alert-danger">
                    @Mensaje
                </div>
            }

            <div class="Botones_agregar">
                <button type="button" @onclick="Volver" class="btn btn-info bi bi-arrow-left-square "> Volver</button>
                <button type="submit" class="btn btn-success bi bi-floppy"> Guardar</button>
            </div>
        </div>

    </div>

</EditForm>

@code {
    public TiposTecnicos TipoTecnicos { get; set; } = new TiposTecnicos();
    string Mensaje { get; set; } = string.Empty;

    public async Task Guardar()
    {
        Mensaje = string.Empty; 
        if (string.IsNullOrWhiteSpace(TipoTecnicos.Descripcion))
        {
            Mensaje = "Por favor, complete todos los campos correctamente.";
            return;
        }

        var nombreExiste = await TTS.ExisteDescripcion(TipoTecnicos.Descripcion);
        if (nombreExiste)
        {
            Mensaje = "Ya existe Este tipo de técnico con el mismo Nombres.";
            return;
        }

        await TTS.Guardar(TipoTecnicos);
        navigation.NavigateTo("/TiposTecnicos/RegistroTipos");
    }
	public void Volver()
	{
		navigation.NavigateTo("/index");
    }
}
